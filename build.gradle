/*
 * Created by Vivek Wiki on 03/12/16.
 */

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'war'
}

repositories {
    jcenter()
}

version = '1.0'
//noinspection GroovyAssignabilityCheck
dependencies {

    // https://mvnrepository.com/artifact/org.springframework/spring-webmvc
    compile group: 'org.springframework', name: 'spring-webmvc', version: '4.3.2.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter
    compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: '1.4.0.RELEASE'

    // https://mvnrepository.com/artifact/javax.servlet/servlet-api
    compile group: 'javax.servlet', name: 'servlet-api', version: '3.0-alpha-1'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'

// https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.2'

// https://mvnrepository.com/artifact/org.projectlombok/lombok
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
// https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'

// https://mvnrepository.com/artifact/javax.servlet/jstl
    compile group: 'javax.servlet', name: 'jstl', version: '1.2'

}

//noinspection GroovyAssignabilityCheck
war {
    baseName = 'transformer'
}

// init env : gradle init -Penv=wiki


task init(overwrite: true) {
    outputs.upToDateWhen {
        false
    }
    if (project.hasProperty("env")) {
        ['src/main/resources'].each { dest ->
            copy() {
                def props = new Properties()
                file("template/env/prod.env").withInputStream {
                    props.load(it);
                }
                from 'template/properties'
                into dest
                include '**/*.template'

//                props.each { key, value ->
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: props)
                //}
                rename(/(.+).template/, '$1')
            }
        }
    }
}

task stage(dependsOn: ['build', 'init','clean'])
build.mustRunAfter clean

compileJava.dependsOn init
